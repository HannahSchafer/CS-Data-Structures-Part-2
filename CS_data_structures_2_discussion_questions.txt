Part 1: Discussion Questions

Recursion:

1.) In your own words, what is recursion?
Recursion is a programming technique or method where a function calls itself
within the definition of the function. It replaces the need for a loop. Also,
every recursive funciton has a base case.


2.) Why is it necessary to have a base case?
Because we need to know when we are done. Otherwise we will get lost in the inception!


Graphs:

1.) What is a graph?
Graphs is a data structure that consists of nodes; the structure shows relationships 
between things; they can be directed or undirected; they can have loops in them 
(i.e. be cyclic OR acyclic); they can be disconnected or connected; and they can have weights.

2.) How is a graph different from a tree?
A tree is a type of graph. A tree can only be connected and acyclic (no loops). 
Trees are mostly directed, whereas a graph is much broader in its criteria. A graph
can by cyclic, be undirected, and be unconnected.

3.) Give an example of something that would be good to model with a graph.
Twitter relationships! Some Twitter relationships are recriprocated, others are not,
meaning some relationships in the graph would be cyclic and some would be acyclical. 


Performance of Different Data Structures:


Fill in the runtimes for the following actions for the table below:

Data Structure                  Index   Search  Add-R   Add-L   Pop-L   Pop-R
Python List (Array)             O(1)    O(n)    O(1)    O(n)    O(n)    O(1)         
Linked List                     O(n)    O(n)    O(1)    O(1)    O(1)    O(1) 
Doubly-Linked List              O(n)    O(n)    O(1)    O(1)    O(1)    O(1)         
Queue (as Array)                X       X       O(1)     X      O(n)     X
Queue (as LL or DLL)            X       X       O(1)     X      O(1)     X
Stack (as Array, LL, or DLL)    X       X       O(1)     X       X      O(1)   
Deque (as DLL)                  X       X       O(1)    O(1)    O(1)    O(1)

Index: Find an item in the structure when you know its position
Search: Find an item in the structure when you know its data
Add(R/L): Set a key in set/dictionary or add node to tree
Pop(R/L): Remove a key or node



Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure              Get         Add     Delete  Iterate     Memory
Dictionary (Hash Map)       O(1)        O(1)    O(1)    O(n)        medium
Set (Hash Map)              O(1)        O(1)    O(1)    O(n)                   
Binary Search Tree          O(log n)    O(1)    O(1)    O(log n)         
Tree                        

Get: Find an item in the structure
Add: Set a key in set/dictionary or add node to tree
Delete: Remove a key or node
Iterate: Find next item in data structure
Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)





